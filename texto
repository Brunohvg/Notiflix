from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver
from io import BytesIO
from PIL import Image
import logging
import secrets
import string
from libs.integracoes.api.api_nuvemshop import NuvemShop
import requests
import qrcode

logger = logging.getLogger(__name__)


class LojaIntegrada(models.Model):
    id = models.CharField(max_length=20, primary_key=True)
    nome = models.CharField(max_length=100)
    whatsapp_phone_number = models.CharField(max_length=20, null=True, blank=True)
    contact_email = models.EmailField(null=True, blank=True)
    email = models.EmailField(null=True, blank=True)
    doc = models.CharField(max_length=14, null=True, blank=True, default="")
    autorization_token = models.CharField(max_length=200)
    usuario = models.OneToOneField(User, related_name="loja", on_delete=models.CASCADE)
    ativa = models.BooleanField(default=True)
    url = models.CharField(max_length=100)
    webhook_url = models.CharField(max_length=200, blank=True, null=True)
    webhook_status = models.CharField(max_length=20, blank=True, null=True)
    events = models.JSONField(default=list)

    def __str__(self) -> str:
        return self.nome

    @property
    def total_pedidos(self):
        return self.pedidos.filter(status_pagamento="pago").count()

    @property
    def total_embalados(self):
        return self.pedidos.filter(status_envio="Processando").count()

    @property
    def total_enviados(self):
        return self.pedidos.filter(status_envio="Enviado").count()

    @property
    def total_cancelados(self):
        return self.pedidos.filter(status_envio="Devolvido").count()


class WhatsappIntegrado(models.Model):
    instanceId = models.CharField(max_length=200, primary_key=True)
    instanceName = models.CharField(max_length=200)
    token = models.CharField(max_length=200, blank=True)
    status = models.CharField(max_length=20, blank=True, null=True)
    qr_code_image = models.ImageField(
        upload_to="whatsapp_qrcodes/", blank=True, null=True
    )
    loja = models.OneToOneField(
        LojaIntegrada, related_name="whatsapp", on_delete=models.CASCADE
    )


class Whatsapp:
    def __init__(self) -> None:
        self.APIKEY = config("APIKEY")
        if not self.APIKEY:
            raise ValueError("APIKEY não configurada")

    def _create_instancia(self, instanceName, token=None):
        url = "https://zap.lojabibelo.com.br/instance/create"
        headers = {
            "accept": "application/json",
            "apikey": self.APIKEY,
            "Content-Type": "application/json",
        }
        data = {
            "instanceName": instanceName,
            "token": "token",
            "qrcode": True,
        }

        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            response_data = response.json()

            qr_code_data = response_data.get("qrcode", {}).get("code")
            if qr_code_data:
                qr_code_bytes, qr_code_image = self._generate_qr_code(qr_code_data)
                return qr_code_bytes, qr_code_image
            else:
                logging.warning("Código QR não encontrado na resposta da API.")
                return None, None
        except requests.exceptions.HTTPError as e:
            logging.error(f"Erro na solicitação HTTP: {e}")
            return None, None
        except requests.exceptions.RequestException as e:
            logging.error(f"Erro na solicitação: {e}")
            return None, None
        except Exception as e:
            logging.error(f"Erro inesperado: {e}")
            return None, None

    def _generate_qr_code(self, data):
        try:
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(data)
            qr.make(fit=True)
            img = qr.make_image(fill_color="black", back_color="white")
            buffered = BytesIO()
            img.save(buffered, format="PNG")
            return buffered.getvalue(), img
        except Exception as e:
            logging.error(f"Erro ao gerar QR Code: {e}")
            return None, None


@receiver(pre_save, sender=WhatsappIntegrado)
def generate_token(sender, instance, **kwargs):
    if not instance.token:
        alphabet = string.ascii_letters + string.digits
        token = "".join(secrets.choice(alphabet) for _ in range(20))
        instance.token = token


@receiver(post_save, sender=LojaIntegrada)
def create_whatsapp_instance(sender, instance, created, **kwargs):
    if created:
        try:
            whatsapp = Whatsapp()
            qr_code_bytes, qr_code_image = whatsapp._create_instancia(
                instanceName=instance.instanceName
            )
            if qr_code_bytes and qr_code_image:
                whatsapp_instance = WhatsappIntegrado.objects.create(
                    instanceId=instance.instanceId,
                    instanceName=instance.instanceName,
                    token=instance.token,
                    status="Pendente",  # Defina o status como necessário
                    loja=instance,
                )
                # Salvar a imagem do QR Code no modelo WhatsappIntegrado
                qr_code_io = BytesIO()
                qr_code_image.save(qr_code_io, format="PNG")
                whatsapp_instance.qr_code_image.save(
                    "qrcode.png", ContentFile(qr_code_io.getvalue())
                )
                whatsapp_instance.save()
            else:
                logger.error("Falha ao criar instância do WhatsApp.")
        except Exception as e:
            logger.error(f"Erro ao criar instância do WhatsApp: {e}")
